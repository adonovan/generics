// Generic utilities for parallel map/reduce and other function program staples.
package main

import (
	"fmt"
	"sync"
)

// ForEach calls f(x) for x in elems, in parallel.
func ForEach[T any](elems []T, f func(T)) {
	var wg sync.WaitGroup
	for _, elem := range elems {
		wg.Add(1)
		go func(elem T) {
			f(elem)
			wg.Done()
		}(elem)
	}
	wg.Wait()
}

// Map computes [f(x) for x in elems] in parallel.
func Map[A, B any](elems []A, f func(A) B) []B {
	res := make([]B, len(elems))
	var wg sync.WaitGroup
	wg.Add(len(elems))
	for i, x := range elems {
		go func(i int, x A) {
			res[i] = f(x)
			wg.Done()
		}(i, x)
	}
	wg.Wait()
	return res
}

// Reduce computes, in parallel, the reduction of a non-empty slice
// using the binary operator f, which must be a monoid.
// f may be called concurrently.
func Reduce[T any](elems []T, f func(T, T) T) T {
	switch n := len(elems); n {
	case 0:
		panic("empty")
	case 1:
		return elems[0]
	default:
		x := make(chan T)
		go func() { x <- Reduce(elems[:n/2], f) }()
		y := Reduce(elems[n/2:], f)
		return f(<-x, y)
	}
}

// --test--

func main() {
	ForEach([]int{1, 2, 3}, func(x int) { fmt.Println(x) }) // prints 1, 2, 3 concurrently

	square := func(x int) int { return x * x }
	fmt.Println(Map([]int{1, 2, 3}, square)) // [1 4 9]

	add := func(x, y int) int { return x + y }
	fmt.Println(Reduce([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, add)) // 55
	mul := func(x, y int) int { return x * y }
	fmt.Println(Reduce([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, mul)) // 3628800
}
