// Generic functions related to numbers.
package main
 
// TODO:
// - routines from Hacker's Delight (e.g. clp2, nlz, popcount)
//   Specialized routines already exist as math/bits.OnesCount[N],
//   but I don't see an easy way to write a generic one that
//   dispatches to the most efficient implementation for the width.
//   But see `algebra` package for a generic implementation of Newton's
//   method that works for float64, complex128, and *big.Rat.
// - Galois fields of (2^N).

import (
	"math/big"
	"fmt"
	"unsafe"
)

type integer interface {
	type int, int8, int16, int32, int64, uint, uint8, uint16, uint32, uint64, uintptr;
}

type float interface {
	type float32, float64;
}

// NB: real, not complex.
type number interface {
	// Q. is there a shorter syntax 'for integer + float'?
	type int, int8, int16, int32, int64, uint, uint8, uint16, uint32, uint64, uintptr,
		float32, float64;
}

// Bits returns the number of bits in an integer or float.
func Bits[T number]() int {
	// WRONG: Sizeof(T) is disallowed for some reason.
	// (Presumably because it would be non-constant?)
	// return unsafe.Sizeof(*new(*T)) * 8

	// WRONG: doesn't work for named (aka defined) types.
	// switch (interface{}(*new(T))).(type) {
	// case int8, uint8: 
	// 	return 8
	// case int16, uint16: 
	// 	return 16
	// ...

	// The compiler doesn't recognize this as a constant,
	// and generates poor code.
	var array [2]T
	return 8 * int(uintptr(unsafe.Pointer(&array[1])) - uintptr(unsafe.Pointer(&array[0])))
}

// Signed reports whether T is a signed integer type.
func Signed[T integer]() bool {
	// This causes a type checker crash (https://github.com/golang/go/issues/44762)
	// return T(0) - 1 < 0

	var zero T
	return zero - 1 < 0
}

// Max returns the maximum value of integer type T.
func Max[T integer]() T {
	bits := Bits[T]()
	if Signed[T]() {
		return 1<<(bits-1) - 1
	} else {
		return (1<<bits)-1
	}
}

// Min returns the minimum value of integer type T.
func Min[T integer]() T {
	if Signed[T]() {
		bits := Bits[T]()
		return 1<<(bits-1)
	} else {
		return 0
	}
}

// Zero returns the zero value of T, aka *new(T).
func Zero[T any]() (_ T) { return; }

// Abs returns the absolute value of an integer or float.
func Abs[T number](x T) T {
	if x < 0 {
		return -x
	} else {
		return x
	}
}

// -- complex numbers: a totally adequate replacement for the built-in types --

type complex64 = Complex[float32]
type complex128 = Complex[float64]

type Complex[T float] struct { re, im T }

func (z Complex[T]) Real() T { return z.re }
func (z Complex[T]) Imag() T { return z.im }

func (z Complex[T]) String() string { return fmt.Sprintf("(%g+%gi)", z.re, z.im) }


func (x Complex[T]) Add(y Complex[T]) Complex[T] {
	return Complex[T]{x.re + y.re, x.im + y.im}
}

func (x Complex[T]) Mul(y Complex[T]) Complex[T] {
	return Complex[T]{x.re * y.re - x.im * y.im, x.re * y.im + x.im * y.re}
}

// --test--

// The compiler generates 126 bytes of code for this function.
// Optimization is clearly needed to turn it into a constant.
func maxuint16() uint16 {
	return Max[uint16]();
}

func main() {
	fmt.Println(Min[uint16](), Max[uint16]()) // 0 65535
	fmt.Println(Min[int16](), Max[int16]())	// -32768 32767
	fmt.Println(Signed[int16]()) // true

	x := complex64{1, 2}
	y := complex64{2, 3}
	fmt.Println(x, y, x.Add(y), x.Mul(y)) // (1+2i) (2+3i) (3+5i) (-4+7i)
}
